datasource mysql {
  provider = "mysql"
  url = "***"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

enum Role {
  READ_WRITE
  READ
  WRITE
  NONE
}

enum PositionNames {
  PRESIDENT_CEO
  VP_CEO
  STORE_MANAGER
  OFFICE_MANAGER
  SALES_DESIGN_MANAGER
  SALES_DESIGN_ASSOCIATE
  SCHEDULING
  TECHNICIAN
  DELIVERY
  WAREHOUSE
  INSTALLATIONS
}

// 1:1 with Employee
model EmployeeModel {
  id                  Int            @id @default(autoincrement())
  positionName        PositionNames
  roleCapability      Role
  employeeId          Employee
  salary              Float
}

model Supplier {
  id          Int         @id @default(autoincrement())
  name        String
  address     String
  city        String
  state       String
  zip         Int
  phone       String
  email       String      @unique
  salesOrders SalesOrder[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id              Int          @id @default(autoincrement())
  modelNumber     String
  productCategory String
  description     String
  unitCost        Float
  listPrice       Float
  serialNumber    String
  brand           String
  salesOrders     SalesOrder[]
  quantityOnHand  Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// the orders for the company, ie fill on hand stock
model SalesOrder {
  id                Int       @id @default(autoincrement())
  productId         Product
  supplierId        Supplier
  quantityPurchased Int
  costEach          Float
  extendedCost      Float
  dueDate           DateTime
  orderDate         DateTime  @default(now())
}

model MagicCode {
  code      String   @id
  user      Employee
  updatedAt DateTime @updatedAt
}

model Employee {
  id                 Int           @id @default(autoincrement())
  locationId         Location      @relation(references: [id])
  employeePosition   EmployeeModel
  firstName          String
  lastName           String
  address            String
  city               String
  state              String
  zip                Int
  phone              String
  email              String         @unique
  password           String
  jwtUserSecret      String
  magicCode          MagicCode?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Inventory {
  id         Int        @id @default(autoincrement())
  productId  Product[]
  locationId Location[]
  name       String
  aisle      Int
  bin        String     @unique
}

model Location {
  id        Int        @id @default(autoincrement())
  address   String
  city      String
  state     String
  zip       Int
  phone     String
  employees Employee[]
}

model Customer {
  id            Int      @id @default(autoincrement())
  firstName     String
  middleInitial String
  lastName      String
  address       String
  city          String
  state         String
  zip           Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


enum Operations {
  DESIGN
  INSTALLATION_CABINETS
  RE_FACING_CABINETS
  PLUMBING
  ELECTRICAL
  PAINTING_WALLPAPER
  GENERAL_CONSTRUCTION
  DELIVERY
}

model Fees {
  operationName Operations @unique
  charge        Int
}

model Job {
  id             Int       @id @default(autoincrement())
  customerId     Customer
  startDate      DateTime  @default(now())
  scheduledEnd   DateTime
  scheduledHours Float
  actualEnd      DateTime?
  actualHours    Float?
}

// the single order for a customer comes first
// dueDate is long term
model CustomerOrder {
  id                Int       @id @default(autoincrement())
  customerId        Customer
  jobId             Job
  orderDate         DateTime  @default(now())
  operationFees     Fees[]
  deliveryCost      Float
  totalCost         Float
  remainderDue      Float
  totalCostDueDate  DateTime
}

// the bill send to the customer monthly
// sales records, may have multiple customer orders
// dueDate defaults to 15th of coming month
model CustomerSale {
  id              Int             @id @default(autoincrement())
  billNumber      Int
  customerId      Customer
  customerOrderId CustomerOrder[]
  productsOrdered CustomerOrderProduct[]
  saleDate        DateTime
  saleAmount      Float
  createdAt       DateTime        @default(now())
  dueDate         DateTime
}

model CustomerOrderProduct {
  quantityPurchased Int
  extendedCost      Float
  productId         Product
  customerSale      CustomerSale
  @@id([productId, customerSale])
}

model Bid {
  id            Int      @id @default(autoincrement())
  customerId    Customer
  requiredHours Float
  bidAmount     Float
}

model BidProduct {
  id         Int      @id @default(autoincrement())
  bidId      Bid
  productId  Product
  saleDate   DateTime @default(now())
  saleAmount Float
}
