generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource mysql {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model Customer {
  address       String
  city          String
  createdAt     DateTime        @default(now())
  firstName     String
  idCustomer    Int             @default(autoincrement()) @id
  lastName      String
  middleInitial String?
  state         String
  updatedAt     DateTime        @updatedAt
  zipCode       Int
  customerOrder CustomerOrder[]
  invoice       Invoice[]
  jobs          Job[]
}

model CustomerOrder {
  actualDeliveryDate    DateTime?
  customerId            Int
  dateCancelled         DateTime?
  employeeId            Int
  expectedDeliveryDate  DateTime
  idCustomerOrder       Int                     @default(autoincrement()) @id
  isCanceled            Boolean                 @default(false)
  orderDate             DateTime                @default(now())
  orderTotal            Float
  storeLocationId       Int
  customer              Customer                @relation(fields: [customerId], references: [idCustomer])
  storeLocations        StoreLocations          @relation(fields: [storeLocationId], references: [idStoreLocations])
  employee              Employee                @relation(fields: [employeeId], references: [employeeId])
  customerOrderProducts CustomerOrderProducts[]
  invoice               Invoice

  @@index([customerId], name: "customerId_idx")
  @@index([customerId], name: "customerorder_ibfk_1")
  @@index([storeLocationId], name: "customerorder_ibfk_2")
  @@index([storeLocationId], name: "storeLocationId_idx")
}

model CustomerOrderProducts {
  customerOrderId         Int
  idCustomerOrderProducts Int           @default(autoincrement()) @id
  perUnitCost             Float
  productId               Int
  quantity                Int
  customerOrder           CustomerOrder @relation(fields: [customerOrderId], references: [idCustomerOrder])
  product                 Product       @relation(fields: [productId], references: [idProduct])

  @@index([customerOrderId], name: "customerOrderId_idx")
  @@index([customerOrderId], name: "customerorderproducts_ibfk_1")
  @@index([productId], name: "customerorderproducts_ibfk_2")
  @@index([productId], name: "productId_idx")
}

model Employee {
  address           String
  city              String
  createdAt         DateTime               @default(now())
  email             String                 @unique
  employeeId        Int                    @default(autoincrement()) @id
  firstName         String
  lastName          String
  password          String
  positionName      EmployeePositionName   @default(NOT_ASSIGNED)
  roleCapability    EmployeeRoleCapability @default(NONE)
  salary            Float
  state             String
  storeLocationId   Int
  updatedAt         DateTime               @updatedAt
  userSigningSecret String
  zipCode           Int
  storeLocations    StoreLocations         @relation(fields: [storeLocationId], references: [idStoreLocations])
  invoice           Invoice[]
  magicCode         MagicCode?
  salesOrders       SalesOrders[]
  customerOrders    CustomerOrder[]

  @@index([storeLocationId], name: "employee_ibfk_1")
  @@index([storeLocationId], name: "storeLocationId_idx")
}

model Inventory {
  aisle          Int
  bin            String         @unique
  idInventory    Int            @default(autoincrement()) @id
  productId      Int
  quantityOnHand Int
  storeLocation  Int
  product        Product        @relation(fields: [productId], references: [idProduct])
  storeLocations StoreLocations @relation(fields: [storeLocation], references: [idStoreLocations])

  @@index([productId], name: "inventory_ibfk_1")
  @@index([storeLocation], name: "inventory_ibfk_2")
  @@index([productId], name: "productId_idx")
  @@index([storeLocation], name: "storeLocationId_idx")
  @@unique([productId, storeLocation])
}

// created with the customer order
model Invoice {
  createdAt        DateTime           @default(now())
  customerId       Int
  customerOrderId  Int
  dueDate          DateTime
  employeeId       Int
  idInvoice        Int                @default(autoincrement()) @id
  invoiceNumber    String             @unique
  // accounts for the orderTotal and jobFeeTotal
  invoiceTotal     Float
  jobId            Int
  // the total from the job fees
  jobFeeTotal      Float              @default(0)
  // the total from the customer order
  orderTotal       Float
  // the date paid off in full 
  paidDate         DateTime?
  storeLocationId  Int
  updatedAt        DateTime           @updatedAt
  customer         Customer           @relation(fields: [customerId], references: [idCustomer])
  customerOrder    CustomerOrder      @relation(fields: [customerOrderId], references: [idCustomerOrder])
  employee         Employee           @relation(fields: [employeeId], references: [employeeId])
  // includes the various operations for the invoice
  job              Job                @relation(fields: [jobId], references: [idJob])
  storeLocations   StoreLocations     @relation(fields: [storeLocationId], references: [idStoreLocations])
  // charges to the customer appear on the invoice as InvoiceLineItems, include fees for 
  invoiceLineItems InvoiceLineItems[]

  @@index([customerId], name: "customerId_idx")
  @@index([customerOrderId], name: "customerOrderId_idx")
  @@index([employeeId], name: "employeeId_idx")
  @@index([customerId], name: "invoice_ibfk_1")
  @@index([customerOrderId], name: "invoice_ibfk_2")
  @@index([employeeId], name: "invoice_ibfk_3")
  @@index([storeLocationId], name: "invoice_ibfk_4")
  @@index([jobId], name: "invoice_ibfk_5_idx")
  @@index([storeLocationId], name: "storeLocationId_idx")
}

// these are the individual bills given to the user
model InvoiceLineItems {
  idinvoiceLineItem Int      @default(autoincrement()) @id
  invoiceId         Int
  lineItemTotal     Float
  invoice           Invoice  @relation(fields: [invoiceId], references: [idInvoice])
  dueDate           DateTime @default(now())

  @@index([invoiceId], name: "invoiceId_idx")
  @@index([invoiceId], name: "invoicelineitems_ibfk_1")
}

// job is automatically assigned to an invoice (1:1)
// job contains the various "Operations" (1:m) of the customerOrder
model Job {
  customerId     Int
  dateCompleted  DateTime?
  dateScheduled  DateTime
  details        String?
  hoursActual    Float?
  hoursScheduled Float
  idJob          Int          @default(autoincrement()) @id
  customer       Customer     @relation(fields: [customerId], references: [idCustomer])
  invoice        Invoice
  operations     Operations[]

  @@index([customerId], name: "customerId_idx")
  @@index([customerId], name: "jobs_ibfk_1")
}

// magic code is sent to employees on account creation if no password provided or on password reset request
model MagicCode {
  code      String   @id
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  employee  Employee @relation(fields: [userId], references: [employeeId])
}

// many to one with Job
// created after the fact so it includes the hours charged and then goes into the invoice as a line item
model Operations {
  chargePerHour Float
  details       String?
  hoursCharged  Float
  idOperations  Int      @default(autoincrement()) @id
  jobId         Int
  customerId    Int
  // what the company is doing, i.e. installation or delivery
  operationName String
  job           Job      @relation(fields: [jobId], references: [idJob])
  customer      Customer @relation(fields: [customerId], references: [idCustomer])

  @@index([jobId], name: "jobId_idx")
  @@index([jobId], name: "operations_ibfk_1")
}

model Product {
  brand                 String
  createdAt             DateTime                @default(now())
  deliveryPrice         Float
  description           String?
  idProduct             Int                     @default(autoincrement()) @id
  listPrice             Float
  modelNumber           String
  productCategory       String
  salePrice             Float?
  serialNumber          String                  @unique
  unitPrice             Float
  updatedAt             DateTime                @updatedAt
  customerOrderProducts CustomerOrderProducts[]
  inventory             Inventory[]
  salesOrderItem        SalesOrderItem[]
}

model SalesOrderItem {
  idSalesOrderItem  Int         @default(autoincrement()) @id
  productId         Int
  quantityPurchased Int
  salesOrderId      Int
  unitPrice         Float
  product           Product     @relation(fields: [productId], references: [idProduct])
  salesOrders       SalesOrders @relation(fields: [salesOrderId], references: [idSalesOrders])

  @@index([productId], name: "productId_idx")
  @@index([salesOrderId], name: "salesOrderId_idx")
  @@index([productId], name: "salesorderitem_ibfk_1")
  @@index([salesOrderId], name: "salesorderitem_ibfk_2")
}

model SalesOrders {
  deliverDate     DateTime
  employeeId      Int
  idSalesOrders   Int              @default(autoincrement()) @id
  orderDate       DateTime         @default(now())
  orderPrice      Float
  storeLocationId Int
  supplierId      Int
  employee        Employee         @relation(fields: [employeeId], references: [employeeId])
  storeLocations  StoreLocations   @relation(fields: [storeLocationId], references: [idStoreLocations])
  suppliers       Suppliers        @relation(fields: [supplierId], references: [idSupplier])
  salesOrderItem  SalesOrderItem[]

  @@index([storeLocationId], name: "idStoreLocationIdx")
  @@index([supplierId], name: "idSupplierIdx")
  @@index([employeeId], name: "id_employeeIdx")
  @@index([employeeId], name: "salesorders_ibfk_1")
  @@index([storeLocationId], name: "salesorders_ibfk_2")
  @@index([supplierId], name: "salesorders_ibfk_3")
}

model StoreLocations {
  address          String
  city             String
  idStoreLocations Int             @default(autoincrement()) @id
  phone            String
  state            String
  zipCode          Int
  customerOrder    CustomerOrder[]
  employee         Employee[]
  inventory        Inventory[]
  invoice          Invoice[]
  salesOrders      SalesOrders[]
}

model Suppliers {
  city        String
  createdAt   DateTime      @default(now())
  email       String        @unique
  idSupplier  Int           @default(autoincrement()) @id
  name        String
  phone       String
  state       String
  updatedAt   DateTime      @updatedAt
  zip         Int
  salesOrders SalesOrders[]
}

// TODO map these position names to role permissions
enum EmployeePositionName {
  PRESIDENT_CEO
  VP_CEO
  STORE_MANAGER
  OFFICE_MANAGER
  SALES_DESIGN_MANAGER
  SALES_DESIGN_ASSOCIATE
  SCHEDULING
  TECHNICIAN
  DELIVERY
  WAREHOUSE
  INSTALLATIONS
  INSTALLATIONS_DELIVERIES
  INSTALLATIONS_DELIVERIES_SALES
  WAREHOUSE_INSTALLATIONS_DELIVERIES
  WAREHOUSE_DELIVERIES
  INFORMATION_TECHNOLOGY
  NOT_ASSIGNED
}

enum EmployeeRoleCapability {
  READ_WRITE
  READ
  NONE
}